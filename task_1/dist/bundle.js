/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/*!********************!*\
  !*** ./js/main.ts ***!
  \********************/

// Write an interface named Teacher that accepts the following elements:
var teacher3 = {
    firstName: 'John',
    fullTimeEmployee: false,
    lastName: 'Doe',
    location: 'London',
    contract: false,
};
console.log("TASK 1");
console.log(teacher3);
var director1 = {
    firstName: 'John',
    lastName: 'Doe',
    location: 'London',
    fullTimeEmployee: true,
    numberOfReports: 17,
};
console.log("TASK 2");
console.log(director1);
var printTeacher = function (firstName, lastName) {
    return "".concat(firstName[0], ". ").concat(lastName);
};
console.log("TASK 3");
console.log(printTeacher(director1.firstName, director1.lastName));
var StudentClass = /** @class */ (function () {
    function StudentClass(firstName, lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
    StudentClass.prototype.workOnHomework = function () {
        return 'Currently Working';
    };
    StudentClass.prototype.displayName = function () {
        return this.firstName;
    };
    return StudentClass;
}());
var student = new StudentClass("Pepe", "Sanchez");
// try {
//   const student1 = new StudentClass("Pepe", 123);
// } catch (error) {
//   console.log(error)
// }
// const student2 = new StudentClass("Pepe", 23);
console.log("TASK 4");
console.log(student);

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdFQUF3RTtBQW9CeEUsSUFBTSxRQUFRLEdBQVk7SUFDeEIsU0FBUyxFQUFFLE1BQU07SUFDakIsZ0JBQWdCLEVBQUUsS0FBSztJQUN2QixRQUFRLEVBQUUsS0FBSztJQUNmLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLFFBQVEsRUFBRSxLQUFLO0NBQ2hCLENBQUM7QUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRXRCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFtQnRCLElBQU0sU0FBUyxHQUFjO0lBQzNCLFNBQVMsRUFBRSxNQUFNO0lBQ2pCLFFBQVEsRUFBRSxLQUFLO0lBQ2YsUUFBUSxFQUFFLFFBQVE7SUFDbEIsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QixlQUFlLEVBQUUsRUFBRTtDQUNwQixDQUFDO0FBRUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUV0QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBeUJ2QixJQUFNLFlBQVksR0FBeUIsVUFBQyxTQUFTLEVBQUUsUUFBUTtJQUM3RCxPQUFPLFVBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxlQUFLLFFBQVEsQ0FBRSxDQUFDO0FBQ3hDLENBQUMsQ0FBQztBQUVGLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQThCbkU7SUFJRSxzQkFBWSxTQUFpQixFQUFFLFFBQWdCO1FBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFDRCxxQ0FBYyxHQUFkO1FBQ0UsT0FBTyxtQkFBbUI7SUFDNUIsQ0FBQztJQUNELGtDQUFXLEdBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQztBQUVELElBQU0sT0FBTyxHQUFHLElBQUksWUFBWSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNwRCxRQUFRO0FBQ1Isb0RBQW9EO0FBQ3BELG9CQUFvQjtBQUNwQix1QkFBdUI7QUFDdkIsSUFBSTtBQUNKLGlEQUFpRDtBQUVqRCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHlwZXNjcmlwdF9kZXBlbmRlbmNpZXMvLi9qcy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFdyaXRlIGFuIGludGVyZmFjZSBuYW1lZCBUZWFjaGVyIHRoYXQgYWNjZXB0cyB0aGUgZm9sbG93aW5nIGVsZW1lbnRzOlxuXG4vLyAgICAgZmlyc3ROYW1lOiBzdHJpbmcgLSBjYW4gb25seSBiZSBzZXQgZHVyaW5nIGluaXRpYWxpemF0aW9uIG9mIGFuIG9iamVjdCBvZiB0aGlzIGludGVyZmFjZVxuLy8gICAgIGxhc3ROYW1lOiBzdHJpbmcgLSBjYW4gb25seSBiZSBzZXQgZHVyaW5nIGluaXRpYWxpemF0aW9uIG9mIGFuIG9iamVjdCBvZiB0aGlzIGludGVyZmFjZVxuLy8gICAgIGZ1bGxUaW1lRW1wbG95ZWU6IGJvb2xlYW5cbi8vICAgICB5ZWFyc09mRXhwZXJpZW5jZTogbnVtYmVyIC0gb3B0aW9uYWxcbi8vICAgICBsb2NhdGlvbjogc3RyaW5nXG4vLyAgICAgQWRkIHRoZSBwb3NzaWJpbGl0eSB0byBhZGQgYW55IGF0dHJpYnV0ZSB0byB0aGUgVGVhY2hlciBvYmplY3QgbGlrZSBjb250cmFjdChib29sZWFuKSB3aXRob3V0IHNwZWNpZnlpbmcgdGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZTpcbi8vICAgICAgICAgUHJvcGVydHkgc2hvdWxkIGJlIGEgc3RyaW5nXG4vLyAgICAgICAgIFR5cGUgb2YgdGhpcyBwcm9wZXJ0eSBjYW4gYmUgYW55dGhpbmdcblxuaW50ZXJmYWNlIFRlYWNoZXIge1xuICByZWFkb25seSBmaXJzdE5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgbGFzdE5hbWU6IHN0cmluZztcbiAgZnVsbFRpbWVFbXBsb3llZTogYm9vbGVhbjtcbiAgeWVhcnNPZkV4cGVyaWVuY2U/OiBudW1iZXI7XG4gIGxvY2F0aW9uOiBzdHJpbmc7XG4gIFtwcm9wTmFtZTogc3RyaW5nXTogYW55O1xufVxuXG5jb25zdCB0ZWFjaGVyMzogVGVhY2hlciA9IHtcbiAgZmlyc3ROYW1lOiAnSm9obicsXG4gIGZ1bGxUaW1lRW1wbG95ZWU6IGZhbHNlLFxuICBsYXN0TmFtZTogJ0RvZScsXG4gIGxvY2F0aW9uOiAnTG9uZG9uJyxcbiAgY29udHJhY3Q6IGZhbHNlLFxufTtcblxuY29uc29sZS5sb2coXCJUQVNLIDFcIik7XG5cbmNvbnNvbGUubG9nKHRlYWNoZXIzKTtcblxuLy8gc2hvdWxkIHByaW50XG4vLyBPYmplY3Rcbi8vIGNvbnRyYWN0OiBmYWxzZVxuLy8gZmlyc3ROYW1lOiBcIkpvaG5cIlxuLy8gZnVsbFRpbWVFbXBsb3llZTogZmFsc2Vcbi8vIGxhc3ROYW1lOiBcIkRvZVwiXG4vLyBsb2NhdGlvbjogXCJMb25kb25cIlxuXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogVEFTSyAyICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuLy8gV3JpdGUgYW4gaW50ZXJmYWNlIG5hbWVkIERpcmVjdG9ycyB0aGF0IGV4dGVuZHMgVGVhY2hlci5cbi8vIEl0IHJlcXVpcmVzIGFuIGF0dHJpYnV0ZSBuYW1lZCBudW1iZXJPZlJlcG9ydHMobnVtYmVyKVxuXG5pbnRlcmZhY2UgRGlyZWN0b3JzIGV4dGVuZHMgVGVhY2hlciB7XG4gIG51bWJlck9mUmVwb3J0czogbnVtYmVyXG59XG5cbmNvbnN0IGRpcmVjdG9yMTogRGlyZWN0b3JzID0ge1xuICBmaXJzdE5hbWU6ICdKb2huJyxcbiAgbGFzdE5hbWU6ICdEb2UnLFxuICBsb2NhdGlvbjogJ0xvbmRvbicsXG4gIGZ1bGxUaW1lRW1wbG95ZWU6IHRydWUsXG4gIG51bWJlck9mUmVwb3J0czogMTcsXG59O1xuXG5jb25zb2xlLmxvZyhcIlRBU0sgMlwiKTtcblxuY29uc29sZS5sb2coZGlyZWN0b3IxKTtcblxuLy8gc2hvdWxkIHByaW50XG4vLyBPYmplY3Rcbi8vIGZpcnN0TmFtZTogXCJKb2huXCJcbi8vIGZ1bGxUaW1lRW1wbG95ZWU6IHRydWVcbi8vIGxhc3ROYW1lOiBcIkRvZVwiXG4vLyBsb2NhdGlvbjogXCJMb25kb25cIlxuLy8gbnVtYmVyT2ZSZXBvcnRzOiAxN1xuXG5cbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqIFRBU0sgMyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4vLyBXcml0ZSBhIGZ1bmN0aW9uIHByaW50VGVhY2hlcjpcblxuLy8gICAgIEl0IGFjY2VwdHMgdHdvIGFyZ3VtZW50cyBmaXJzdE5hbWUgYW5kIGxhc3ROYW1lXG4vLyAgICAgSXQgcmV0dXJucyB0aGUgZmlyc3QgbGV0dGVyIG9mIHRoZSBmaXJzdE5hbWUgYW5kIHRoZSBmdWxsIGxhc3ROYW1lXG4vLyAgICAgRXhhbXBsZTogcHJpbnRUZWFjaGVyKFwiSm9oblwiLCBcIkRvZVwiKSAtPiBKLiBEb2VcblxuLy8gV3JpdGUgYW4gaW50ZXJmYWNlIGZvciB0aGUgZnVuY3Rpb24gbmFtZWQgcHJpbnRUZWFjaGVyRnVuY3Rpb24uXG5cbmludGVyZmFjZSBwcmludFRlYWNoZXJGdW5jdGlvbiB7XG4gIChmaXJzdE5hbWU6IHN0cmluZywgbGFzdE5hbWU6IHN0cmluZyk6IHN0cmluZztcbn1cblxuY29uc3QgcHJpbnRUZWFjaGVyOiBwcmludFRlYWNoZXJGdW5jdGlvbiA9IChmaXJzdE5hbWUsIGxhc3ROYW1lKSA9PiB7XG4gIHJldHVybiBgJHtmaXJzdE5hbWVbMF19LiAke2xhc3ROYW1lfWA7XG59O1xuXG5jb25zb2xlLmxvZyhgVEFTSyAzYCk7XG5cbmNvbnNvbGUubG9nKHByaW50VGVhY2hlcihkaXJlY3RvcjEuZmlyc3ROYW1lLCBkaXJlY3RvcjEubGFzdE5hbWUpKTtcblxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqIFRBU0sgNCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuLy8gV3JpdGUgYSBDbGFzcyBuYW1lZCBTdHVkZW50Q2xhc3M6XG5cbi8vICAgICBUaGUgY29uc3RydWN0b3IgYWNjZXB0cyBmaXJzdE5hbWUoc3RyaW5nKSBhbmQgbGFzdE5hbWUoc3RyaW5nKSBhcmd1bWVudHNcbi8vICAgICBUaGUgY2xhc3MgaGFzIGEgbWV0aG9kIG5hbWVkIHdvcmtPbkhvbWV3b3JrIHRoYXQgcmV0dXJuIHRoZSBzdHJpbmcgQ3VycmVudGx5IHdvcmtpbmdcbi8vICAgICBUaGUgY2xhc3MgaGFzIGEgbWV0aG9kIG5hbWVkIGRpc3BsYXlOYW1lLiBJdCByZXR1cm5zIHRoZSBmaXJzdE5hbWUgb2YgdGhlIHN0dWRlbnRcbi8vICAgICBUaGUgY29uc3RydWN0b3Igb2YgdGhlIGNsYXNzIHNob3VsZCBiZSBkZXNjcmliZWQgdGhyb3VnaCBhbiBJbnRlcmZhY2Vcbi8vICAgICBUaGUgY2xhc3Mgc2hvdWxkIGJlIGRlc2NyaWJlZCB0aHJvdWdoIGFuIEludGVyZmFjZVxuXG4vLyBSZXF1aXJlbWVudHM6XG5cbi8vICAgICBZb3UgY2FuIHJldXNlIHRoZSBXZWJwYWNrIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgcHJldmlvdXMgZXhlcmNpc2UgdG8gY29tcGlsZSB0aGUgY29kZS5cbi8vICAgICBXaGVuIHJ1bm5pbmcgbnBtIHJ1biBidWlsZCwgbm8gVHlwZVNjcmlwdCBlcnJvciBzaG91bGQgYmUgZGlzcGxheWVkLlxuLy8gICAgIEV2ZXJ5IHZhcmlhYmxlIHNob3VsZCB1c2UgVHlwZVNjcmlwdCB3aGVuIHBvc3NpYmxlLlxuXG5pbnRlcmZhY2UgSW50ZXJmYWNlU3R1ZGVudCB7XG4gIHdvcmtPbkhvbWV3b3JrKCk6IHN0cmluZztcbiAgZGlzcGxheU5hbWUoKTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgQ29uc3RydWN0b3JTdHVkZW50IHtcbiAgbmV3IChcbiAgICBmaXJzdE5hbWU6IHN0cmluZyxcbiAgICBsYXN0TmFtZTogc3RyaW5nLFxuICApOiBJbnRlcmZhY2VTdHVkZW50XG59XG5cbmNsYXNzIFN0dWRlbnRDbGFzcyBpbXBsZW1lbnRzIEludGVyZmFjZVN0dWRlbnQge1xuICBmaXJzdE5hbWU6IHN0cmluZztcbiAgbGFzdE5hbWU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihmaXJzdE5hbWU6IHN0cmluZywgbGFzdE5hbWU6IHN0cmluZykge1xuICAgIHRoaXMuZmlyc3ROYW1lID0gZmlyc3ROYW1lO1xuICAgIHRoaXMubGFzdE5hbWUgPSBsYXN0TmFtZTtcbiAgfVxuICB3b3JrT25Ib21ld29yaygpOiBzdHJpbmcge1xuICAgIHJldHVybiAnQ3VycmVudGx5IFdvcmtpbmcnXG4gIH1cbiAgZGlzcGxheU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5maXJzdE5hbWU7XG4gIH1cbn1cblxuY29uc3Qgc3R1ZGVudCA9IG5ldyBTdHVkZW50Q2xhc3MoXCJQZXBlXCIsIFwiU2FuY2hlelwiKTtcbi8vIHRyeSB7XG4vLyAgIGNvbnN0IHN0dWRlbnQxID0gbmV3IFN0dWRlbnRDbGFzcyhcIlBlcGVcIiwgMTIzKTtcbi8vIH0gY2F0Y2ggKGVycm9yKSB7XG4vLyAgIGNvbnNvbGUubG9nKGVycm9yKVxuLy8gfVxuLy8gY29uc3Qgc3R1ZGVudDIgPSBuZXcgU3R1ZGVudENsYXNzKFwiUGVwZVwiLCAyMyk7XG5cbmNvbnNvbGUubG9nKFwiVEFTSyA0XCIpXG5jb25zb2xlLmxvZyhzdHVkZW50KTtcblxuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=